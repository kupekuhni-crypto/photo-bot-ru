# bot.py
import os
import logging
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import replicate
import asyncio
import tempfile
import aiohttp
import base64
from PIL import Image
import io

logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")
YOOMONEY_PACK1 = os.getenv("YOOMONEY_PACK1_URL", "https://yoomoney.ru")
YOOMONEY_PACK3 = os.getenv("YOOMONEY_PACK3_URL", "https://yoomoney.ru")
YOOMONEY_PACK5 = os.getenv("YOOMONEY_PACK5_URL", "https://yoomoney.ru")
YOOMONEY_ANIMATE = os.getenv("YOOMONEY_ANIMATE_URL", "https://yoomoney.ru")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

class UserState(StatesGroup):
    service = State()
    photos = State()

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="–û–∂–∏–≤–∏—Ç—å –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ —Ü–µ–Ω—ã")]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –±–µ—Ä–µ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö:\n"
        "‚ú® –£–±–µ—Ä—ë–º —Ü–∞—Ä–∞–ø–∏–Ω—ã –∏ –ø—è—Ç–Ω–∞\n"
        "‚ú® –£–≤–µ–ª–∏—á–∏–º –∫–∞—á–µ—Å—Ç–≤–æ –≤ 4 —Ä–∞–∑–∞\n"
        "‚ú® –í–µ—Ä–Ω—ë–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞\n"
        "üé• –û–∂–∏–≤–∏–º –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ (–ª—ë–≥–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.",
        reply_markup=MAIN_KEYBOARD
    )

@router.message(lambda m: m.text == "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å —Ñ–æ—Ç–æ")
async def restore_start(message: Message, state: FSMContext):
    await state.set_state(UserState.photos)
    await state.update_data(service="restore")
    pay_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 —Ñ–æ—Ç–æ ‚Äî 110 ‚ÇΩ", url=YOOMONEY_PACK1)],
        [InlineKeyboardButton(text="3 —Ñ–æ—Ç–æ ‚Äî 280 ‚ÇΩ", url=YOOMONEY_PACK3)],
        [InlineKeyboardButton(text="5 —Ñ–æ—Ç–æ ‚Äî 420 ‚ÇΩ", url=YOOMONEY_PACK5)]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:", reply_markup=pay_kb)
    await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ(–∞).")

@router.message(lambda m: m.text == "–û–∂–∏–≤–∏—Ç—å –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ")
async def animate_start(message: Message, state: FSMContext):
    await state.set_state(UserState.photos)
    await state.update_data(service="animate")
    pay_btn = InlineKeyboardButton(text="–û–∂–∏–≤–ª–µ–Ω–∏–µ ‚Äî 130 ‚ÇΩ", url=YOOMONEY_ANIMATE)
    await message.answer(
        "–û–ø–ª–∞—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[pay_btn]])
    )
    await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")

@router.message(lambda m: m.text == "‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ —Ü–µ–Ω—ã")
async def help(message: Message):
    await message.answer(
        "üí∞ –¶–µ–Ω—ã:\n"
        "‚Ä¢ 1 —Ñ–æ—Ç–æ ‚Äî 110 ‚ÇΩ\n"
        "‚Ä¢ 3 —Ñ–æ—Ç–æ ‚Äî 280 ‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 50 ‚ÇΩ)\n"
        "‚Ä¢ 5 —Ñ–æ—Ç–æ ‚Äî 420 ‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 130 ‚ÇΩ)\n"
        "‚Ä¢ –û–∂–∏–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–∞ ‚Äî 130 ‚ÇΩ\n\n"
        "üîí –í—Å–µ —Ñ–æ—Ç–æ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
        "üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @–≤–∞—à_–Ω–∏–∫_–≤_—Ç–µ–ª–µ–≥—Ä–∞–º–µ",
        reply_markup=MAIN_KEYBOARD
    )

@router.message(UserState.photos, lambda m: m.photo)
async def process_photos(message: Message, state: FSMContext):
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º... –≠—Ç–æ –∑–∞–π–º—ë—Ç 20‚Äì60 —Å–µ–∫—É–Ω–¥.")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    service = data["service"]
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            image_bytes = await resp.read()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç –≤ base64
    image_b64 = "image/jpeg;base64," + base64.b64encode(image_bytes).decode()
    
    try:
        client = replicate.Client(api_token=REPLICATE_API_TOKEN)
        
        if service == "restore":
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: restore ‚Üí upscale ‚Üí colorize
            restored = client.run(
                "batouk/restore-old-photos:7a585186a8323b75f61c38e0c8c8e2e8d5e9e8a8e8e8e8e8e8e8e8e8e8e8e8e8",
                input={"image": image_b64}
            )
            upscaled = client.run(
                "xinntao/realesrgan:42f8e3a8d3e4a5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0",
                input={"image": restored, "scale": 4}
            )
            result = client.run(
                "photoroom/colorize:7a585186a8323b75f61c38e0c8c8e2e8d5e9e8a8e8e8e8e8e8e8e8e8e8e8e8e8",
                input={"image": upscaled}
            )
            await message.answer_photo(photo=result)
            
        elif service == "animate":
            result = client.run(
                "peter9477/liveportrait:7a585186a8323b75f61c38e0c8c8e2e8d5e9e8a8e8e8e8e8e8e8e8e8e8e8e8e8",
                input={"image": image_b64}
            )
            await message.answer_video(video=result)
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")
    
    await message.answer("–ì–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–º –ø–∞–º—è—Ç—å –æ –±–ª–∏–∑–∫–∏—Ö.", reply_markup=MAIN_KEYBOARD)
    await state.clear()

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())