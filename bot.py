import os
import asyncio
import aiohttp
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, LabeledPrice
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiohttp import web

# --- –ö–æ–Ω—Ñ–∏–≥–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_PROVIDER_TOKEN = os.getenv("YOOMONEY_PROVIDER", "TEST")  # –µ—Å–ª–∏ TEST ‚Äî –±—É–¥–µ—Ç –∑–∞–≥–ª—É—à–∫–∞ –æ–ø–ª–∞—Ç—ã
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")

if not BOT_TOKEN or not REPLICATE_TOKEN:
    raise RuntimeError("BOT_TOKEN –∏ REPLICATE_API_TOKEN –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- FSM ---
class OrderState(StatesGroup):
    waiting_demo_photo = State()
    waiting_payment = State()

# --- –¶–µ–Ω—ã (–∫–æ–ø–µ–π–∫–∏ RUB) ---
PRICES = {
    "restore": 19900,
    "colorize": 19900,
    "upscale": 14900,
    "animate": 24900,
    "pack3": 49900,
    "pack5": 79900,
}

# --- –ú–æ–¥–µ–ª–∏ Replicate (–∑–∞–º–µ–Ω–∏ version-id –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ) ---
MODELS = {
    "restore": "sczhou/codeformer:version-id",
    "colorize": "jantic/deoldify:version-id",
    "upscale": "xinntao/realesrgan:version-id",
    "animate": "albarji/face-vid2vid:version-id",
}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üñº –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ (199‚ÇΩ)")],
        [KeyboardButton(text="üé® –°–¥–µ–ª–∞—Ç—å —Ü–≤–µ—Ç–Ω—ã–º (199‚ÇΩ)")],
        [KeyboardButton(text="üîé –£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ (149‚ÇΩ)")],
        [KeyboardButton(text="üòä –û–∂–∏–≤–∏—Ç—å –ª–∏—Ü–æ (249‚ÇΩ)")],
        [KeyboardButton(text="üì¶ –ü–∞–∫–µ—Ç 3 —Ñ–æ—Ç–æ (499‚ÇΩ)"), KeyboardButton(text="üì¶ –ü–∞–∫–µ—Ç 5 —Ñ–æ—Ç–æ (799‚ÇΩ)")],
        [KeyboardButton(text="‚ú® –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–µ–º–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ")],
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
    ],
    resize_keyboard=True
)

# --- –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ ---
def add_watermark(image_bytes: bytes, text: str = "DEMO") -> bytes:
    img = Image.open(BytesIO(image_bytes)).convert("RGBA")
    watermark = Image.new("RGBA", img.size, (0,0,0,0))
    draw = ImageDraw.Draw(watermark)
    w, h = img.size
    font_size = max(30, w // 10)
    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", font_size)
    except:
        font = ImageFont.load_default()
    text_w, text_h = draw.textsize(text, font)
    draw.text(((w-text_w)//2, (h-text_h)//2), text, (255,255,255,180), font=font)
    out = Image.alpha_composite(img, watermark)
    buffer = BytesIO()
    out.convert("RGB").save(buffer, format="JPEG")
    return buffer.getvalue()

# --- Replicate API ---
async def process_replicate(image_url: str, model: str) -> str:
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        r = await session.post(
            "https://api.replicate.com/v1/predictions",
            headers=headers,
            json={"version": model, "input": {"image": image_url}}
        )
        data = await r.json()
        pred_id = data["id"]

        while True:
            rr = await session.get(f"https://api.replicate.com/v1/predictions/{pred_id}", headers=headers)
            dd = await rr.json()
            if dd["status"] == "succeeded":
                return dd["output"][0]
            if dd["status"] in ["failed", "canceled"]:
                return None
            await asyncio.sleep(2)

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(F.text.in_(['/start', '/help']))
async def start(m: Message, state: FSMContext):
    await state.clear()
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å –∏ –æ–∂–∏–≤–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=main_kb
    )

# --- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ---
@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def instructions(m: Message, state: FSMContext):
    await state.clear()
    await m.answer(
        "üìå –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–ª–∏ –ø–∞–∫–µ—Ç.\n"
        "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ (—Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–ï–°–¢ —Ä–µ–∂–∏–º ‚Äî –¥–µ–Ω—å–≥–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è).\n"
        "3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚úÖ",
        reply_markup=main_kb
    )

# --- –î–µ–º–æ ---
@dp.message(F.text == "‚ú® –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–µ–º–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
async def demo_start(m: Message, state: FSMContext):
    await state.set_state(OrderState.waiting_demo_photo)
    await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—é –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ üíß.")

@dp.message(OrderState.waiting_demo_photo, F.photo)
async def handle_demo(m: Message, state: FSMContext):
    file = await bot.get_file(m.photo[-1].file_id)
    photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    result_url = await process_replicate(photo_url, MODELS["restore"])
    if not result_url:
        await m.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        return
    async with aiohttp.ClientSession() as session:
        async with session.get(result_url) as resp:
            img_bytes = await resp.read()
    marked = add_watermark(img_bytes, "DEMO")
    await bot.send_photo(m.chat.id, marked, caption="–≠—Ç–æ –¥–µ–º–æ ‚ú® –û–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.")
    await state.update_data(original_photo_url=photo_url)

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã (—Å –∑–∞–≥–ª—É—à–∫–æ–π) ---
async def send_invoice(m: Message, service: str, title: str, desc: str):
    # –ï—Å–ª–∏ —Ä–µ–∂–∏–º TEST -> –¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if PAYMENT_PROVIDER_TOKEN == "TEST":
        await m.answer(f"üí≥ –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ ¬´{title}¬ª (–¢–ï–°–¢) –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ")
        fake_message = m
        fake_message.successful_payment = types.SuccessfulPayment(
            currency="RUB",
            total_amount=PRICES[service],
            invoice_payload=service,
            shipping_option_id=None,
            telegram_payment_charge_id="TEST",
            provider_payment_charge_id="TEST"
        )
        await payment_ok(fake_message, dp.fsm.get_context(bot, m.chat.id, m.from_user.id))
    else:
        prices = [LabeledPrice(label=title, amount=PRICES[service])]
        await bot.send_invoice(
            chat_id=m.chat.id,
            title=title,
            description=desc,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            payload=service
        )

# --- –•—ç–Ω–¥–ª–µ—Ä—ã —É—Å–ª—É–≥ ---
@dp.message(F.text.startswith("üñº"))
async def pay_restore(m: Message): await send_invoice(m,"restore","–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ","–†–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –ò–ò")

@dp.message(F.text.startswith("üé®"))
async def pay_colorize(m: Message): await send_invoice(m,"colorize","–†–∞—Å–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ","–†–∞—Å–∫—Ä–∞—Å–∏–º —á/–± —Ñ–æ—Ç–æ")

@dp.message(F.text.startswith("üîé"))
async def pay_upscale(m: Message): await send_invoice(m,"upscale","–ê–ø—Å–∫–µ–π–ª","–ü–æ–≤—ã—Å–∏–º —á—ë—Ç–∫–æ—Å—Ç—å —Ñ–æ—Ç–æ")

@dp.message(F.text.startswith("üòä"))
async def pay_animate(m: Message): await send_invoice(m,"animate","–û–∂–∏–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–∞","–°–¥–µ–ª–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ª–∏—Ü–∞")

@dp.message(F.text.startswith("üì¶ –ü–∞–∫–µ—Ç 3"))
async def pay_pack3(m: Message): await send_invoice(m,"pack3","–ü–∞–∫–µ—Ç 3 —Ñ–æ—Ç–æ","–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä—ë—Ö —Ñ–æ—Ç–æ")

@dp.message(F.text.startswith("üì¶ –ü–∞–∫–µ—Ç 5"))
async def pay_pack5(m: Message): await send_invoice(m,"pack5","–ü–∞–∫–µ—Ç 5 —Ñ–æ—Ç–æ","–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—è—Ç–∏ —Ñ–æ—Ç–æ")

# --- Pre-checkout (–Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã) ---
@dp.pre_checkout_query()
async def pcq(pre: types.PreCheckoutQuery):
    if PAYMENT_PROVIDER_TOKEN != "TEST":
        await bot.answer_pre_checkout_query(pre.id, ok=True)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã ---
@dp.message(F.successful_payment)
async def payment_ok(m: Message, state: FSMContext):
    service = m.successful_payment.invoice_payload
    data = await state.get_data()
    photo_url = data.get("original_photo_url")

    if photo_url:
        await m.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Ñ–æ—Ç–æ...")
        result = await process_replicate(photo_url, MODELS.get(service, MODELS["restore"]))
        if not result:
            await m.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
            return
        if service == "animate":
            await m.answer_video(result, caption="üòä –í–æ—Ç –æ–∂–∏–≤–ª—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!")
        else:
            await m.answer_photo(result, caption="‚úÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!")
        await state.clear()
    else:
        await m.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

# --- Healthcheck ---
async def handle_health(request): return web.Response(text="OK", status=200)
async def start_webserver():
    app = web.Application()
    app.router.add_get("/", handle_health)
    runner = web.AppRunner(app); await runner.setup()
    site = web.TCPSite(runner,"0.0.0.0",int(os.getenv("PORT",10000)))
    await site.start()

# --- Main ---
async def main():
    asyncio.create_task(start_webserver())
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())
