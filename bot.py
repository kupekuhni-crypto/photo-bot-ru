import os
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiohttp import web
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO

# --- –ö–æ–Ω—Ñ–∏–≥–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")

if not BOT_TOKEN or not REPLICATE_TOKEN:
    raise RuntimeError("BOT_TOKEN –∏ REPLICATE_API_TOKEN –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# FSM
class OrderState(StatesGroup):
    waiting_photo = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ú® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ (249‚ÇΩ)")],
        [KeyboardButton(text="üé® –°–¥–µ–ª–∞—Ç—å —Ü–≤–µ—Ç–Ω—ã–º (199‚ÇΩ)")],
        [KeyboardButton(text="üòä –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ (249‚ÇΩ)")],
        [KeyboardButton(text="üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ")],
        [KeyboardButton(text="üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")],
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
    ],
    resize_keyboard=True
)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é
extra_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîé –£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (149‚ÇΩ)")],
        [KeyboardButton(text="üéô –ì–æ–≤–æ—Ä—è—â–µ–µ —Ñ–æ—Ç–æ (VIP, 349‚ÇΩ)")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

# --- –ú–æ–¥–µ–ª–∏ Replicate ---
MODELS = {
    "restore": "flux-kontext-apps/restore-image:9685836a-8c4d-4f5b-829d-a5df1a2b75c6",
    "colorize": "jantic/deoldify:a1557ee7f36c4edba5832252497a15cf63c01d10293fbe466fc8da4e1bdf8d6b",
    "upscale": "xinntao/realesrgan:1d6a2f505b2712369a6c0aaf9a2d95ea9325da1425ed638232a5edbde069d44e",
    "animate": "albarji/face-vid2vid:6c2cbe0abada4a249cfefeb0b13ab3ab911c2da6f0986d5f1fd5fef0429ae2d1",
    "talk": "camenduru/sadtalker:f650960fbc2b43d88fc4a08ecb15696ffc2c85d1396830e15787adfcd8734a09",
}

# --- –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ñ–æ—Ç–æ (–∑–∞–≥–ª—É—à–∫–∏ —Å Unsplash) ---
DEMO_IMAGES = {
    "restore": "https://images.unsplash.com/photo-1503023345310-bd7c1de61c7d",   # —Å—Ç–∞—Ä–æ–µ –ª–∏—Ü–æ
    "colorize": "https://images.unsplash.com/photo-1501594907352-04cda38ebc29",  # —á/–± –¥–µ–≤—É—à–∫–∞
    "animate": "https://images.unsplash.com/photo-1500648767791-00dcc994a43e",   # –ø–æ—Ä—Ç—Ä–µ—Ç –º—É–∂—á–∏–Ω—ã
    "upscale": "https://images.unsplash.com/photo-1504198453319-5ce911bafcde",   # –ø—Ä–∏—Ä–æ–¥–∞
    "talk": "https://images.unsplash.com/photo-1544005313-94ddf0286df2",         # –ø–æ—Ä—Ç—Ä–µ—Ç –∂–µ–Ω—â–∏–Ω—ã
}

# --- Replicate API ---
async def process_replicate(image_url: str, model: str, extra_input: dict = None) -> str:
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}"}
    payload = {"version": model, "input": {"image": image_url}}
    if extra_input:
        payload["input"].update(extra_input)
    async with aiohttp.ClientSession() as session:
        r = await session.post("https://api.replicate.com/v1/predictions", headers=headers, json=payload)
        data = await r.json()
        pred_id = data.get("id")
        if not pred_id:
            return None
        while True:
            rr = await session.get(f"https://api.replicate.com/v1/predictions/{pred_id}", headers=headers)
            dd = await rr.json()
            if dd["status"] == "succeeded":
                return dd["output"][0] if isinstance(dd["output"], list) else dd["output"]
            if dd["status"] in ["failed", "canceled"]:
                return None
            await asyncio.sleep(2)

# --- Watermark ---
def add_watermark(image_bytes: bytes, text="DEMO") -> bytes:
    img = Image.open(BytesIO(image_bytes)).convert("RGBA")
    watermark = Image.new("RGBA", img.size, (0,0,0,0))
    draw = ImageDraw.Draw(watermark)
    w, h = img.size
    font_size = max(20, w//10)
    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", font_size)
    except:
        font = ImageFont.load_default()
    text_w, text_h = draw.textsize(text, font)
    draw.text(((w - text_w)//2, (h - text_h)//2), text, fill=(255,255,255,180), font=font)
    out = Image.alpha_composite(img, watermark)
    buf = BytesIO(); out.convert("RGB").save(buf, "JPEG")
    return buf.getvalue()

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(F.text.in_(['/start', '/help']))
async def start_handler(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å –∏ –æ–∂–∏–≤–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                   reply_markup=main_kb)

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def instructions(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:\n"
                   "‚úÖ –§–æ—Ç–æ —Ä–æ–≤–Ω–æ–µ (–Ω–µ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ)\n"
                   "‚úÖ –õ–∏—Ü–æ –≤–∏–¥–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
                   "‚úÖ –ù–µ—Ç —Ä—É–∫/–ª–∏—à–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
                   "‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n\n"
                   "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞: 30‚Äì40 —Å–µ–∫—É–Ω–¥.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É üëá",
                   reply_markup=main_kb)

@dp.message(F.text == "üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
async def extras_menu(m: Message):
    await m.answer("üì¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=extra_kb)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(m: Message):
    await m.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

# --- –£—Å–ª—É–≥–∏ —Å —Ñ–æ—Ç–æ-–ø—Ä–∏–º–µ—Ä–∞–º–∏ ---
@dp.message(F.text.startswith("‚ú®"))
async def choose_restore(m: Message, state: FSMContext):
    await m.answer_photo(
        DEMO_IMAGES["restore"],
        caption="‚ú® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ (249‚ÇΩ)\n\nüì∏ –£–±–µ—Ä—ë–º —Ü–∞—Ä–∞–ø–∏–Ω—ã, —à—É–º –∏ —Ç—Ä–µ—â–∏–Ω—ã.\nüîé –£–ª—É—á—à–∏–º —á—ë—Ç–∫–æ—Å—Ç—å –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ ‚¨áÔ∏è"
    )
    await state.set_state(OrderState.waiting_photo)
    await state.update_data(service="restore")

@dp.message(F.text.startswith("üé®"))
async def choose_colorize(m: Message, state: FSMContext):
    await m.answer_photo(
        DEMO_IMAGES["colorize"],
        caption="üé® –°–¥–µ–ª–∞—Ç—å —Ü–≤–µ—Ç–Ω—ã–º (199‚ÇΩ)\n\n–î–æ–±–∞–≤–∏–º —è—Ä–∫–∏–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∫ —á/–± —Å–Ω–∏–º–∫—É.\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ ‚¨áÔ∏è"
    )
    await state.set_state(OrderState.waiting_photo)
    await state.update_data(service="colorize")

@dp.message(F.text.startswith("üòä"))
async def choose_animate(m: Message, state: FSMContext):
    await m.answer_photo(
        DEMO_IMAGES["animate"],
        caption="üòä –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ (249‚ÇΩ)\n\n–ü—Ä–µ–≤—Ä–∞—Ç–∏–º —Å—Ç–∞—Ç–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º.\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ ‚¨áÔ∏è"
    )
    await state.set_state(OrderState.waiting_photo)
    await state.update_data(service="animate")

@dp.message(F.text.startswith("üîé"))
async def choose_upscale(m: Message, state: FSMContext):
    await m.answer_photo(
        DEMO_IMAGES["upscale"],
        caption="üîé –£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (149‚ÇΩ)\n\n–ü–æ–≤—ã—Å–∏–º —á—ë—Ç–∫–æ—Å—Ç—å –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é.\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ ‚¨áÔ∏è"
    )
    await state.set_state(OrderState.waiting_photo)
    await state.update_data(service="upscale")

@dp.message(F.text.startswith("üéô"))
async def choose_talk(m: Message, state: FSMContext):
    await m.answer_photo(
        DEMO_IMAGES["talk"],
        caption="üéô –ì–æ–≤–æ—Ä—è—â–µ–µ —Ñ–æ—Ç–æ (VIP, 349‚ÇΩ)\n\n–°–¥–µ–ª–∞–µ–º –≤–∏–¥–µ–æ, –≥–¥–µ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Ñ–æ—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–æ—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç.\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ ‚¨áÔ∏è"
    )
    await state.set_state(OrderState.waiting_photo)
    await state.update_data(service="talk")

@dp.message(F.text == "üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
async def demo_start(m: Message, state: FSMContext):
    await m.answer("üÜì –î–µ–º–æ-—Ä–µ–∂–∏–º: –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º üíß.")
    await state.set_state(OrderState.waiting_photo)
    await state.update_data(service="demo")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
@dp.message(OrderState.waiting_photo, F.photo)
async def process_photo(m: Message, state: FSMContext):
    data = await state.get_data()
    service = data.get("service")

    file = await bot.get_file(m.photo[-1].file_id)
    photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

    await m.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")

    if service == "demo":
        result_url = await process_replicate(photo_url, MODELS["restore"])
        if result_url:
            async with aiohttp.ClientSession() as session:
                async with session.get(result_url) as resp:
                    raw = await resp.read()
            wm = add_watermark(raw, "DEMO")
            await bot.send_photo(m.chat.id, photo=wm, caption="üíß –≠—Ç–æ –¥–µ–º–æ. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é.")
        else:
            await m.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–º–æ.")
        await state.clear()
        return

    model_ver = MODELS[service]
    result = await process_replicate(photo_url, model_ver)

    if result:
        if service in ["animate", "talk"]:
            await m.answer_video(result, caption="‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!")
        else:
            await m.answer_photo(result, caption="‚úÖ –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    else:
        await m.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    await state.clear()

# --- Healthcheck ---
async def handle_health(request): return web.Response(text="OK", status=200)
async def start_webserver():
    app = web.Application(); app.router.add_get("/", handle_health)
    runner = web.AppRunner(app); await runner.setup()
    site = web.TCPSite(runner,"0.0.0.0",int(os.getenv("PORT",10000))); await site.start()

# --- Main ---
async def main():
    asyncio.create_task(start_webserver())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
