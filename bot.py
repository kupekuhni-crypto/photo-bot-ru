import os
import asyncio
import aiohttp
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, LabeledPrice, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# --- –ö–æ–Ω—Ñ–∏–≥–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_PROVIDER_TOKEN = os.getenv("YOOMONEY_PROVIDER")
REPLICATE_TOKEN = os.getenv("REPLICATE_API_TOKEN")

if not BOT_TOKEN or not PAYMENT_PROVIDER_TOKEN or not REPLICATE_TOKEN:
    raise RuntimeError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN, YOOMONEY_PROVIDER –∏ REPLICATE_API_TOKEN!")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- FSM ---
class OrderState(StatesGroup):
    waiting_photo_demo = State()   # –∂–¥—ë–º —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –¥–µ–º–æ
    waiting_photo_paid = State()   # –∂–¥—ë–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üñº –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üé® –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üîé –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞")],
        [KeyboardButton(text="üòä –û–∂–∏–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–∞")],
        [KeyboardButton(text="üì¶ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–¥–µ–º–æ)")],
    ],
    resize_keyboard=True
)

# --- –¶–µ–Ω—ã ---
PRICES = {
    "restore": 19900,    # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    "colorize": 19900,
    "upscale": 14900,
    "animate": 24900,
}

# --- –ú–æ–¥–µ–ª–∏ Replicate (–∑–∞–º–µ–Ω–∏ version-id –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ) ---
MODELS = {
    "restore": "sczhou/codeformer:version-id",
    "colorize": "jantic/deoldify:version-id",
    "upscale": "xinntao/realesrgan:version-id",
    "animate": "albarji/face-vid2vid:version-id",
}

# --- –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ ---
def add_watermark(image_bytes: bytes, text: str = "DEMO") -> bytes:
    img = Image.open(BytesIO(image_bytes)).convert("RGBA")
    watermark = Image.new("RGBA", img.size, (0, 0, 0, 0))
    draw = ImageDraw.Draw(watermark)

    w, h = img.size
    font_size = max(30, w // 10)
    try:
        font = ImageFont.truetype(
            "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", font_size
        )
    except:
        font = ImageFont.load_default()

    text_w, text_h = draw.textsize(text, font)
    draw.text(
        ((w - text_w) // 2, (h - text_h) // 2),
        text,
        (255, 255, 255, 180),
        font=font,
    )

    out = Image.alpha_composite(img, watermark)
    buffer = BytesIO()
    out.convert("RGB").save(buffer, format="JPEG")
    return buffer.getvalue()

# --- –†–∞–±–æ—Ç–∞ —Å Replicate ---
async def process_replicate(image_url: str, model: str) -> str:
    headers = {"Authorization": f"Token {REPLICATE_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        r = await session.post(
            "https://api.replicate.com/v1/predictions",
            headers=headers,
            json={"version": model, "input": {"image": image_url}}
        )
        data = await r.json()
        pred_id = data["id"]

        # –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            rr = await session.get(f"https://api.replicate.com/v1/predictions/{pred_id}", headers=headers)
            dd = await rr.json()
            status = dd["status"]
            if status == "succeeded":
                return dd["output"][0]
            elif status in ["failed", "canceled"]:
                return None
            await asyncio.sleep(2)

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
@dp.message(F.text.in_(["/start", "/help"]))
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —Ä–∞—Å–∫—Ä–∞—Å–∏—Ç—å –∏ –æ–∂–∏–≤–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=main_kb)

# –ü—Ä–æ–±–Ω–æ–µ –¥–µ–º–æ
@dp.message(F.text == "üì¶ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–¥–µ–º–æ)")
async def demo_start(message: Message, state: FSMContext):
    await state.set_state(OrderState.waiting_photo_demo)
    await message.answer("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–µ–º–æ. –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ –∏ –Ω–∞–ª–æ–∂—É –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫.")

@dp.message(OrderState.waiting_photo_demo, F.photo)
async def handle_demo(message: Message, state: FSMContext):
    file = await bot.get_file(message.photo[-1].file_id)
    photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

    # –±–µ—Ä—ë–º –º–æ–¥–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è "restore" –¥–ª—è –¥–µ–º–æ
    model_ver = MODELS["restore"]
    result = await process_replicate(photo_url, model_ver)
    if not result:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    # –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º watermark
    async with aiohttp.ClientSession() as session:
        async with session.get(result) as resp:
            img = await resp.read()
    marked = add_watermark(img, "DEMO")

    await bot.send_photo(
        chat_id=message.chat.id,
        photo=marked,
        caption="–≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º. –û–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á—ë—Ç
async def send_service_invoice(message: Message, service: str, title: str, desc: str):
    prices = [LabeledPrice(label=title, amount=PRICES[service])]
    await bot.send_invoice(
        chat_id=message.chat.id,
        title=title,
        description=desc,
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        payload=service
    )

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É—Å–ª—É–≥
@dp.message(F.text == "üñº –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")
async def service_restore(m: Message): 
    await send_service_invoice(m, "restore", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–Ω–∏–º–∫–æ–≤ –ò–ò")

@dp.message(F.text == "üé® –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ")
async def service_color(m: Message): 
    await send_service_invoice(m, "colorize", "–†–∞—Å–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ", "–¶–≤–µ—Ç–∏–∑–∞—Ü–∏—è —á/–± —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")

@dp.message(F.text == "üîé –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞")
async def service_upscale(m: Message): 
    await send_service_invoice(m, "upscale", "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞", "–ü–æ–≤—ã—à–µ–Ω–∏–µ —á—ë—Ç–∫–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∞–ø—Å–∫–µ–π–ª)")

@dp.message(F.text == "üòä –û–∂–∏–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–∞")
async def service_animate(m: Message): 
    await send_service_invoice(m, "animate", "–û–∂–∏–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–∞", "–ê–Ω–∏–º–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–∏—Ü–∞")

# –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π pre_checkout
@dp.pre_checkout_query()
async def pcq(pre: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre.id, ok=True)

# —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
@dp.message(F.successful_payment)
async def payment(message: Message, state: FSMContext):
    service = message.successful_payment.invoice_payload
    await state.set_state(OrderState.waiting_photo_paid)
    await state.update_data(service=service)
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
@dp.message(OrderState.waiting_photo_paid, F.photo)
async def process_paid_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    service = data.get("service")

    file = await bot.get_file(message.photo[-1].file_id)
    photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

    model_ver = MODELS[service]
    result = await process_replicate(photo_url, model_ver)

    if not result:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ.")
        return

    # –ê–Ω–∏–º–∞—Ü–∏—è –¥–∞—ë—Ç –≤–∏–¥–µ–æ ‚Üí –ø—Ä–æ–≤–µ—Ä–∏–º
    if service == "animate":
        await message.answer_video(result, caption="‚úÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!")
    else:
        await message.answer_photo(result, caption="‚úÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!")

    await state.clear()

# --- main ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
